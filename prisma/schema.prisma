generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  watchLists    WatchList[]
}

model Author {
  id          Int     @id @default(autoincrement())
  imageString String
  name        String
  bio         String?
  books       Book[]
}

model Book {
  id              Int      @id @default(autoincrement())
  title           String
  originalTitle   String?
  language        String
  isbn            String
  overview        String
  videoSource     String
  youtubeUrl      String?
  categoryId      Int
  publicationYear Int
  authorId        Int
  condition       String
  quantity        Int
  isOriginal      Boolean
  availability    String
  imageStrings    String[]
  createdAt       DateTime @default(now())
  internalCode    String?  @unique
  volume          Int?
  donorId         Int?
  countryId       Int?
  edition         String?

  category     Category      @relation(fields: [categoryId], references: [id])
  author       Author        @relation(fields: [authorId], references: [id])
  reservations Reservation[]
  watchLists   WatchList[]
  librarians   Librarian[]   @relation("BookUpdates")
  auditTrails  AuditTrail[]
  donor        Donor?        @relation(fields: [donorId], references: [id])
  country      Country?      @relation(fields: [countryId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Donor {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Librarian {
  id          Int          @id @default(autoincrement())
  name        String
  imageString String?
  books       Book[]       @relation("BookUpdates")
  updatedAt   DateTime?
  auditTrails AuditTrail[]
}

model AuditTrail {
  id       Int      @id @default(autoincrement())
  bookId   Int
  editedBy Int
  editDate DateTime @default(now())
  changes  String

  book      Book      @relation(fields: [bookId], references: [id])
  librarian Librarian @relation(fields: [editedBy], references: [id])
}

model Reservation {
  id         Int      @id @default(autoincrement())
  userId     String
  bookId     Int
  reservedOn DateTime @default(now())
  dueBy      DateTime

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model WatchList {
  id     String @id @default(uuid())
  userId String
  bookId Int?

  user User  @relation(fields: [userId], references: [id])
  book Book? @relation(fields: [bookId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
